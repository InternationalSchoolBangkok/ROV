/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rov.rasputin.Commander;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.ds.ipcam.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

/**
 *
 * @author 15998
 */
public class Display extends javax.swing.JFrame {

    private Worker worker;
    private Properties settings;
    private Webcam olga, alexei;
    
    private void loadSettings(){
        Webcam.setDriver(new IpCamDriver());
        
        try {
            settings = new Properties();
            InputStream in = getClass().getResourceAsStream("settings.properties");
            if(in==null) System.out.println("ERROR");
            settings.load(in);
            in.close();
        } catch(IOException ex) {
            Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    
    private void createAndStartWorker(){
        worker = new Worker(this, settings);
        worker.start();
    }
    
    private void createCam(){
        String user=settings.getProperty("camUser");
        String pass= settings.getProperty("camPass");
        IpCamAuth auth = new IpCamAuth(user,pass);
        
        IpCamDeviceRegistry.unregisterAll();
        String format = "http://%s/videostream.cgi?loginuse=%s&loginpas=%s";
        Dimension d = new Dimension(500, 375);
        try {
            IpCamDeviceRegistry.register("Olga", String.format(format,settings.getProperty("olgaAddr"), user,pass), IpCamMode.PUSH, auth).setResolution(d);
            IpCamDeviceRegistry.register("Alexei", String.format(format,settings.getProperty("alexeiAddr"), user,pass), IpCamMode.PUSH, auth).setResolution(d);
        } catch(MalformedURLException ex) {
            Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void connectCam(){
        olga = Webcam.getWebcams().get(0);
        WebcamPanel subOlga = new WebcamPanel(olga);
        subOlga.setFPSDisplayed(true);
        subOlga.setDisplayDebugInfo(true);
        subOlga.setFPSLimit(60);
        olgaPanel.removeAll();
        olgaPanel.add(subOlga);
        olgaPanel.revalidate();
        olgaPanel.repaint();
        
        alexei = Webcam.getWebcams().get(1);
        WebcamPanel subAlexei = new WebcamPanel(alexei);
        subAlexei.setFPSDisplayed(true);
        subAlexei.setDisplayDebugInfo(true);
        subAlexei.setFPSLimit(60);
        alexeiPanel.removeAll();
        alexeiPanel.add(subAlexei);
        alexeiPanel.revalidate();
        alexeiPanel.repaint();
        
        pack();
    }
    
    private void disconnectCam(){
        olga.close();
        alexei.close();
    }

    /**
     * Creates new form Interface
     */
    public Display() {
        loadSettings();
        createCam();
        initComponents();
        createAndStartWorker();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        xAnalogLabel = new JLabel();
        yAnalogLabel = new JLabel();
        zAnalogLabel = new JLabel();
        rzAnalogLabel = new JLabel();
        xLabel = new JLabel();
        yLabel = new JLabel();
        zLabel = new JLabel();
        rzLabel = new JLabel();
        stateLabel = new JLabel();
        olgaPanel = new JPanel();
        alexeiPanel = new JPanel();
        jSeparator1 = new JSeparator();
        connectCamBtn = new JButton();
        disconnectCamBtn = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("ROV Rasputin Commander");
        setName("rovCommander"); // NOI18N
        setResizable(false);

        xAnalogLabel.setText("X-Analog:");

        yAnalogLabel.setText("Y-Analog:");

        zAnalogLabel.setText("Z-Analog:");

        rzAnalogLabel.setText("RZ-Analog:");

        xLabel.setText("0.0");

        yLabel.setText("0.0");

        zLabel.setText("0.0");

        rzLabel.setText("0.0");

        stateLabel.setText("State");

        olgaPanel.setBackground(new Color(0, 0, 0));
        olgaPanel.setMinimumSize(new Dimension(640, 480));
        olgaPanel.setLayout(new BorderLayout());

        alexeiPanel.setBackground(new Color(0, 0, 0));
        alexeiPanel.setPreferredSize(new Dimension(500, 375));
        alexeiPanel.setLayout(new BorderLayout());

        connectCamBtn.setText("Connect Cameras");
        connectCamBtn.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                connectCamBtnActionPerformed(evt);
            }
        });

        disconnectCamBtn.setText("Disconnect Cameras");
        disconnectCamBtn.setEnabled(false);
        disconnectCamBtn.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                disconnectCamBtnActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jSeparator1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(GroupLayout.LEADING)
                            .add(xAnalogLabel)
                            .add(yAnalogLabel)
                            .add(rzAnalogLabel))
                        .add(19, 19, 19)
                        .add(layout.createParallelGroup(GroupLayout.LEADING)
                            .add(rzLabel)
                            .add(yLabel)
                            .add(layout.createSequentialGroup()
                                .add(xLabel)
                                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(stateLabel))
                            .add(zLabel)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(GroupLayout.LEADING)
                            .add(zAnalogLabel)
                            .add(layout.createSequentialGroup()
                                .add(connectCamBtn)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(disconnectCamBtn))
                            .add(layout.createSequentialGroup()
                                .add(olgaPanel, GroupLayout.PREFERRED_SIZE, 500, GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(alexeiPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(xLabel)
                        .add(stateLabel))
                    .add(xAnalogLabel))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(yAnalogLabel)
                    .add(yLabel))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(zAnalogLabel)
                    .add(zLabel))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(rzAnalogLabel)
                    .add(rzLabel))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(layout.createParallelGroup(GroupLayout.LEADING)
                    .add(olgaPanel, GroupLayout.PREFERRED_SIZE, 375, GroupLayout.PREFERRED_SIZE)
                    .add(alexeiPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(connectCamBtn)
                    .add(disconnectCamBtn))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void connectCamBtnActionPerformed(ActionEvent evt)//GEN-FIRST:event_connectCamBtnActionPerformed
    {//GEN-HEADEREND:event_connectCamBtnActionPerformed
        connectCam();
        connectCamBtn.setEnabled(false);
        disconnectCamBtn.setEnabled(true);
    }//GEN-LAST:event_connectCamBtnActionPerformed

    private void disconnectCamBtnActionPerformed(ActionEvent evt)//GEN-FIRST:event_disconnectCamBtnActionPerformed
    {//GEN-HEADEREND:event_disconnectCamBtnActionPerformed
        disconnectCam();
        connectCamBtn.setEnabled(true);
        disconnectCamBtn.setEnabled(false);
    }//GEN-LAST:event_disconnectCamBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the system look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Display().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel alexeiPanel;
    private JButton connectCamBtn;
    private JButton disconnectCamBtn;
    private JSeparator jSeparator1;
    private JPanel olgaPanel;
    private JLabel rzAnalogLabel;
    public JLabel rzLabel;
    public JLabel stateLabel;
    private JLabel xAnalogLabel;
    public JLabel xLabel;
    private JLabel yAnalogLabel;
    public JLabel yLabel;
    private JLabel zAnalogLabel;
    public JLabel zLabel;
    // End of variables declaration//GEN-END:variables
}

